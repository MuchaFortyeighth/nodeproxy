package com.mix.service;

import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.mix.entity.dto.Vulnerability;
import com.mix.entity.dto.VulnerabilityAttackLog;
import com.mix.mapper.DefiContractMapper;
import com.mix.mapper.VulnerabilityAttackLogMapper;
import com.mix.mapper.VulnerabilityMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.List;

@Service
public class VulnerabilityService {
    @Autowired
    private VulnerabilityMapper vulnerabilityMapper;

    @Autowired
    private DefiContractMapper defiContractMapper;

    @Autowired
    private VulnerabilityAttackLogMapper vulnerabilityAttackLogMapper;

    public List<Vulnerability> getVulnerabilityList() {
        return vulnerabilityMapper.queryVulnerabilityList();
    }

    public Vulnerability getVulnerabilityDetails(String contractAddress) {
        return vulnerabilityMapper.queryVulnerabilityDetails(contractAddress);
    }

    public Vulnerability getDefiContractVulnerabilityDetails(String contractAddress) {
        return defiContractMapper.queryVulnerabilityDetails(contractAddress);
    }

    public JSONObject getAttackStep(String contractAddress, String attackerAddress, String spendAmount) {
        String attackStep = vulnerabilityMapper.queryAttackStep(contractAddress);
        if (attackStep == null) {
            throw new IllegalArgumentException("No data found for the given contract address.");
        }

        // 替换 0xAttackerAddress123 的值
        attackStep = attackStep.replace("0xAttackerAddress123", attackerAddress);
//        attackStep = attackStep.replace("\"balance\"", spendAmount);

        Vulnerability vulnerability = vulnerabilityMapper.queryVulnerabilityBaseInfo(contractAddress);
        if (vulnerability != null) {
            // 创建日志对象
            VulnerabilityAttackLog attackLog = new VulnerabilityAttackLog();
            attackLog.setContractName(vulnerability.getContractName());
            attackLog.setContractAddress(contractAddress);
            attackLog.setAttackerAddress(attackerAddress);
            attackLog.setAttackTime(LocalDateTime.now());
            attackLog.setVulnerabilityType(vulnerability.getVulnerabilityType());

            // 插入日志
            vulnerabilityAttackLogMapper.insert(attackLog);
        }

        // 转换为 JSONObject 返回
        JSONObject jsonObject = JSONObject.parseObject(attackStep);
        jsonObject.put("attackTime",LocalDateTime.now());
        return jsonObject;
    }

    public IPage<VulnerabilityAttackLog> getPaginatedLogs(int page, int size) {
        // 构造分页对象
        Page<VulnerabilityAttackLog> pagination = new Page<>(page, size);
        return vulnerabilityAttackLogMapper.queryPaginatedLogs(pagination);
    }

}
