package com.mix.controller;

import com.mix.entity.Result;
import com.mix.entity.StepType;
import com.mix.entity.VulnerabilityType;
import com.mix.entity.dto.Vulnerability;
import com.mix.service.VulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/vulnerability")
public class VulnerabilityController {

    @Autowired
    private VulnerabilityService vulnerabilityService;

    @GetMapping("/enum/types")
    public Result getVulnerabilityTypes() {
        return Result.success(Arrays.stream(VulnerabilityType.values())
                .map(type -> {
                    Map<String, String> map = new HashMap<>();
                    map.put("name", type.getName());
                    map.put("description", type.getDescription());
                    return map;
                })
                .collect(Collectors.toList()));
    }

    @GetMapping("/enum/attack-step-types")
    public Result getStepTypes() {
        return Result.success(Arrays.stream(StepType.values())
                .collect(Collectors.toMap(Enum::name, StepType::getDescription)));
    }


    // 列表查询接口
    @GetMapping("/list")
    public Result getVulnerabilityList() {
        return Result.success(vulnerabilityService.getVulnerabilityList());
    }

    // 根据 contract_address 查询接口
    @GetMapping(
        value = "/code-scan/{contractAddress}",
        produces = "application/json;charset=UTF-8"
    )
    @ResponseBody
    public Result getVulnerabilityDetails(@PathVariable String contractAddress) {
        return Result.success(vulnerabilityService.getVulnerabilityDetails(contractAddress));
    }

    @PostMapping("/attack-step")
    public Result getAttackStep(@RequestBody Map<String, String> request) {
        String contractAddress = request.get("contractAddress");
        String attackerAddress = request.get("attackerAddress");
        String spendAmount = request.get("spendAmount");

        if (contractAddress == null || attackerAddress == null || spendAmount == null) {
            throw new IllegalArgumentException("Missing required parameters.");
        }

        return Result.success(vulnerabilityService.getAttackStep(contractAddress, attackerAddress, spendAmount));
    }

    @GetMapping("/logs/{current}/{size}")
    public Result getPaginatedLogs(
            @PathVariable int current,
            @PathVariable int size) {
        return Result.success(vulnerabilityService.getPaginatedLogs(current, size));
    }
}
